services:
  # Web Application
  web:
    build:
      context: .
      target: development
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/scry
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Scry - ETL Application
  etl:
    build:
      context: ./scry
      dockerfile: Dockerfile
      target: development
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SCRY_LOG=${SCRY_LOG}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["etl"]

  # PostgreSQL Database (shared by web and etl)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database Admin Interface
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    depends_on:
      - postgres

volumes:
  postgres_dev_data:
  etl_target:
