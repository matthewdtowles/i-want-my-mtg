services:
  # Web App
  web:
    image: ghcr.io/matthewdtowles/web:latest
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  # ETL App
  etl:
    image: ghcr.io/${GITHUB_REPOSITORY}/etl:${IMAGE_TAG:-latest}
    restart: "no"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SCRY_LOG=info
    env_file:
      - .env.prod
    depends_on:
      postgres:
        condition: service_healthy
    profiles: ["etl"]
    networks:
      - app-network

  # Shared DB
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env.prod
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    # No ports exposed to the outside world (internal only)

  # Reverse proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - app-network

volumes:
  postgres_prod_data:

networks:
  app-network:
    driver: bridge